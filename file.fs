(*
Largest prime factor
Problem 3
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
*)
let isPrime i =
    let rec isPrime_inner x acc:bool = 
        if x = 1L then 
            true 
        elif acc = x then 
            true 
        else 
            if x % acc = 0L then 
                false 
            else 
                isPrime_inner x (acc + 1L)
    isPrime_inner i 2L


let largestPrimeFactor i = 
    let rec largestPrimeFactor_inner x acc =
        if x = 1L || x = acc then 
          acc 
        elif isPrime acc then 
            if x % acc = 0L then 
                largestPrimeFactor_inner (x/acc) (acc + 1L)
            else 
                largestPrimeFactor_inner (x) (acc + 1L)
        else 
            largestPrimeFactor_inner (x) (acc + 1L)
    largestPrimeFactor_inner i 1L
            
let result = largestPrimeFactor 600851475143L

printfn "%A" result
//6857 
// Took about 10 seconds to run





(*
Problem 1
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
*)

let result = [1..999] |> List.filter(fun a -> a % 3 = 0 || a % 5 = 0) |> List.reduce (+) //(fun acc i -> acc + i)
printfn "%A" result
//233168



(*
Problem 2
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*)
let fib x = 
    let rec fib_tail (i:int) (a_acc:int) (b_acc:int) (sum:int): int = 
        match i with 
        | 0 -> sum//a_acc 
        | 1 -> fib_tail(i - 1) (b_acc) (a_acc) (sum)
        | _ -> fib_tail (i - 1) (b_acc) (b_acc + a_acc) (if b_acc % 2= 0 && b_acc < 4000000 then b_acc + sum else sum)
  
    fib_tail x 1 2 0   //  "fib_tail x 1 2" allows for the first term to start at 1 as defined in sequence in question. (1, 2, 3, 5, 8)
    
printfn "%A" (fib 35)
